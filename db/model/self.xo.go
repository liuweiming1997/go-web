// Package model contains the types for schema 'homework'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Self represents a row from 'homework.self'.
type Self struct {
	AutoID int             `json:"auto_id"` // auto_id
	User   sql.NullString  `json:"user"`    // user
	Money  sql.NullFloat64 `json:"money"`   // money
	Time   time.Time       `json:"time"`    // time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Self exists in the database.
func (s *Self) Exists() bool {
	return s._exists
}

// Deleted provides information if the Self has been deleted from the database.
func (s *Self) Deleted() bool {
	return s._deleted
}

// Insert inserts the Self to the database.
func (s *Self) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO homework.self (` +
		`user, money, time` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.User, s.Money, s.Time)
	res, err := db.Exec(sqlstr, s.User, s.Money, s.Time)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.AutoID = int(id)
	s._exists = true

	return nil
}

// Update updates the Self in the database.
func (s *Self) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE homework.self SET ` +
		`user = ?, money = ?, time = ?` +
		` WHERE auto_id = ?`

	// run query
	XOLog(sqlstr, s.User, s.Money, s.Time, s.AutoID)
	_, err = db.Exec(sqlstr, s.User, s.Money, s.Time, s.AutoID)
	return err
}

// Save saves the Self to the database.
func (s *Self) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Delete deletes the Self from the database.
func (s *Self) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM homework.self WHERE auto_id = ?`

	// run query
	XOLog(sqlstr, s.AutoID)
	_, err = db.Exec(sqlstr, s.AutoID)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// SelfByAutoID retrieves a row from 'homework.self' as a Self.
//
// Generated from index 'self_auto_id_pkey'.
func SelfByAutoID(db XODB, autoID int) (*Self, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`auto_id, user, money, time ` +
		`FROM homework.self ` +
		`WHERE auto_id = ?`

	// run query
	XOLog(sqlstr, autoID)
	s := Self{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, autoID).Scan(&s.AutoID, &s.User, &s.Money, &s.Time)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
