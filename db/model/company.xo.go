// Package model contains the types for schema 'homework'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Company represents a row from 'homework.company'.
type Company struct {
	AutoID int             `json:"auto_id"` // auto_id
	User   sql.NullString  `json:"user"`    // user
	Money  sql.NullFloat64 `json:"money"`   // money
	Time   time.Time       `json:"time"`    // time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Company exists in the database.
func (c *Company) Exists() bool {
	return c._exists
}

// Deleted provides information if the Company has been deleted from the database.
func (c *Company) Deleted() bool {
	return c._deleted
}

// Insert inserts the Company to the database.
func (c *Company) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO homework.company (` +
		`user, money, time` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.User, c.Money, c.Time)
	res, err := db.Exec(sqlstr, c.User, c.Money, c.Time)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	c.AutoID = int(id)
	c._exists = true

	return nil
}

// Update updates the Company in the database.
func (c *Company) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE homework.company SET ` +
		`user = ?, money = ?, time = ?` +
		` WHERE auto_id = ?`

	// run query
	XOLog(sqlstr, c.User, c.Money, c.Time, c.AutoID)
	_, err = db.Exec(sqlstr, c.User, c.Money, c.Time, c.AutoID)
	return err
}

// Save saves the Company to the database.
func (c *Company) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Delete deletes the Company from the database.
func (c *Company) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM homework.company WHERE auto_id = ?`

	// run query
	XOLog(sqlstr, c.AutoID)
	_, err = db.Exec(sqlstr, c.AutoID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CompanyByAutoID retrieves a row from 'homework.company' as a Company.
//
// Generated from index 'company_auto_id_pkey'.
func CompanyByAutoID(db XODB, autoID int) (*Company, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`auto_id, user, money, time ` +
		`FROM homework.company ` +
		`WHERE auto_id = ?`

	// run query
	XOLog(sqlstr, autoID)
	c := Company{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, autoID).Scan(&c.AutoID, &c.User, &c.Money, &c.Time)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// CompaniesByUser retrieves a row from 'homework.company' as a Company.
//
// Generated from index 'user'.
func CompaniesByUser(db XODB, user sql.NullString) ([]*Company, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`auto_id, user, money, time ` +
		`FROM homework.company ` +
		`WHERE user = ?`

	// run query
	XOLog(sqlstr, user)
	q, err := db.Query(sqlstr, user)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Company{}
	for q.Next() {
		c := Company{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.AutoID, &c.User, &c.Money, &c.Time)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}
